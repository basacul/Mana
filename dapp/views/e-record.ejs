<% include partials/header %>
<article>
    <div class="container">
        <h1>IMPLEMENTS web3 contract invocation</h1>
        <p>This section holds personal data stored indirectly in the ethereum
            network as an external data storage solution such as IPFS will be used. </p>

        <p>The contract is accessible after the transaction has been mined.
            The contract object is accessible with web3.</p>
        <ul>
            <li>web3.eth.contract(abiDefinition Array)
                <ol>
                    <li>Deploying the contract code to EVM<br>
                        <ul>
                            <li>
                                let contractInstance= contract.new({
                                from: web3.eth.coinbase,
                                data: bytecode,
                                gas: gas
                                })<br>
                                Callback function gets called 2 times if successful<br>
                                1. Result = Transaction Hash<br>
                                2. Result = Contract Instance address<br>
                                with contractInstance.transactionHash and contractInstance.address
                            </li>
                            <li>
                                OR USING sendTransaction<br>
                                let conData = contract.new.getData(..., {data:bytecode});<br>
                                let transactionHash = web3.eth.sendTransaction({..., conData}, function(e,r){..})<br>
                                let conAddress = web3.eth.getTransactionReceipt(transactionHash, function(e,r){...});

                            </li>
                        </ul>
                    </li>
                    <li>Invoking a contract function
                        <ul>
                            <li>Requires a contract instance we need the address of the contract</li>
                            <li>Executed on local node: <br>
                                let contract = web3.eth.contract(abiDefinitioN) <br>
                                let contractInstance = contract.at(address)</li>
                            <li>
                                For invoking the contract in network<br>
                                1. contractInstance.METHOD.call(...) or <br>
                                2. contractInstance.METHOD.sendTransaction(..)
                            </li>
                        </ul>
                    </li>

                    <li>Watch for events from contract instance
                        <ul>
                            <li>Use events for dapp for which I need the specific address</li>
                            <li>Event: get/watch especially for dapps</li>
                            <li>Filter: get/watch may be used for writing tools as it listens to all events from any
                                source
                            </li>
                        </ul>
                    </li>
                </ol>
            </li>
        </ul>
    </div>
</article>

<% include partials/footer %>